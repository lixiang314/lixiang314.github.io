<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lixzap's blog</title>
    <description>dddd</description>
    <link>//</link>
    <atom:link href="//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 03 Oct 2016 00:59:57 +0800</pubDate>
    <lastBuildDate>Mon, 03 Oct 2016 00:59:57 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>使用jekyll来生成属于你自己的博客网站</title>
        <description>&lt;p&gt;很遗憾，本次教程只针对macOS系统，所以如果你是其他系统，有些细节可能有所差异，不过可以参考。&lt;/p&gt;

&lt;p&gt;macOS自带ruby，所以不必安装，我们先来确认一下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby -v
ruby 2.0.0p645 (2015-04-13 revision 50299) [universal.x86_64-darwin15]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后更新一下gem（可能需要翻墙）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo gem update --system
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来可以用gem安装jekyll了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里如果有以下报错：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR:  While executing gem ... (Gem::CommandLineError)
    Please specify at least one gem name (e.g. gem build GEMNAME)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;去stackoverflow找了一下原因：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Apparently with OSX el Capitan, there is a new security function that prevents you from modifying system files called Rootless.&lt;/p&gt;

  &lt;p&gt;——RōŸ Çāłdērōn, from stackoverflow.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好吧，OSX11不给安装到根目录，那我换到&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt;去。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install -n /usr/local/bin jekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样就把jekyll安装好了。确认一下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll -v
jekyll 3.2.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;jekyll安装成功之后，我们只成功了10%。哈哈哈哈哈哈。&lt;/p&gt;

&lt;p&gt;之前的步骤都是准备工作，我们现在才要开始制作我们的jekyll博客，想要做的漂亮得花很多时间，懒癌晚期的我是不打算自己写一个的，所以我们直接使用现成的博客。去Github找一个漂亮的jekyll模板，直接clone到本地。这样我们就成功了90%。&lt;/p&gt;

&lt;p&gt;我作为教程，使用的是Github用户Huxpro的模板。&lt;/p&gt;

&lt;p&gt;把他的模板clone到本地后，进入模板根目录，执行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在_config.yml文件中配置博客的一些参数（如博客名等）。&lt;/p&gt;

&lt;p&gt;而所有博客文件（一般是markdown格式），都在&lt;code class=&quot;highlighter-rouge&quot;&gt;/_posts&lt;/code&gt;目录下。&lt;/p&gt;

&lt;p&gt;在浏览器打开&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;，就能预览这个模板。&lt;/p&gt;

&lt;p&gt;把这整个目录部署到服务器上以供他人访问。我推荐Github Pages来部署你的博客。&lt;/p&gt;

&lt;p&gt;关于，怎么使用Github Pages，由于时间关系，我就不赘述了，本集完。&lt;/p&gt;

&lt;p&gt;如果你在配置过程中遇到任何问题，请留言。&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Oct 2016 00:00:00 +0800</pubDate>
        <link>//2016/10/01/other/</link>
        <guid isPermaLink="true">//2016/10/01/other/</guid>
        
        <category>前端开发</category>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>快速入门JavaScript模块化</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;都说“不重复造轮子”，就像iPhone——它除了打电话还可以播放音乐——但是工程师不用从零开始做一个音乐播放功能，也许只要在iPhone的系统中整合一个ipod。&lt;/p&gt;

&lt;p&gt;前端开发亦是如此，最理想化的开发状态就是，工程师只写核心业务代码，其他通用的功能和组件都可以无缝加载别人写好的代码，就像很多那样。&lt;/p&gt;

&lt;p&gt;可是实际情况是，有个糟糕的 iPhone 工程师，他搞混了 iPhone 和 ipod 的系统，甚至把 iPhone 的 Home 键和 iPod 的音量键焊在同一个。&lt;/p&gt;

&lt;p&gt;还有一些糟糕 JavaScript 开发者，一不小心声明了全局变量，混乱了“命名空间”，都让协作开发变得不那么友好，抑或他开发了一个通用模块，用户们却发现载入了他的代码之后，用户自己的代码被他搞得一团糟。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;原始人写法&lt;/h2&gt;

&lt;p&gt;比如下面这段代码：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var mylove = &quot;coding&quot;;

function getLove() {
  return mylove;
}

function sayLove(thing) {
  console.log(thing);
}

console.log(getLove());//&amp;gt;&amp;gt;&amp;gt; coding
sayLove('girl');//&amp;gt;&amp;gt;&amp;gt; girl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在 window 对象下声明了一个变量&lt;code class=&quot;highlighter-rouge&quot;&gt;mylove&lt;/code&gt;，然后使用&lt;code class=&quot;highlighter-rouge&quot;&gt;getLove()&lt;/code&gt;函数去获取这个变量，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;setLove()&lt;/code&gt;修改这个变量。
恩，功能是实现了。只是这样做之后，说不定什么时候你由于粗心又在某个地方声明了一次&lt;code class=&quot;highlighter-rouge&quot;&gt;mylove&lt;/code&gt;，而你的粗心同事也不知道会在什么地方写了一个同名函数——也许有3个参数的&lt;code class=&quot;highlighter-rouge&quot;&gt;setLove()&lt;/code&gt;函数。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;对象封装写法&lt;/h2&gt;
&lt;p&gt;怎么办呢？你获取想到了，把这些变量和函数都写在一个对象里：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var loveThing = {
  mylove : &quot;coding&quot;,
  getLove :function() {
    return this.mylove;
  },
  sayLove : function(thing) {
    console.log(thing);
  }
}

console.log(loveThing.getLove());//&amp;gt;&amp;gt;&amp;gt; coding
loveThing.sayLove('girl');//&amp;gt;&amp;gt;&amp;gt; girl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这种写法已经有点模块的样子了，一下就能看出这几个函数和变量之间的联系。缺点在于所有变量都必须声明为公有，所以都要加this指示作用域以引用这些变量。更危险的是，在对象之外也能轻松更改里面的参数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;loveThing.mylove = &quot;sleeping&quot;;
console.log(loveThing.getLove());//&amp;gt;&amp;gt;&amp;gt; sleeping
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;立即执行函数&lt;/h2&gt;
&lt;p&gt;我向来不惮以最坏的恶意揣测程序员，你永远想不到你的 partner 会不会真的在其他地方修改了你的参数，也不知道自己是否会在不经意间修改了他的。我们必须在他下手之前——让自己的模块先执行掉，不给对方可趁之机。此时使用一种叫做&lt;strong&gt;立即执行函数&lt;/strong&gt;的办法，可以避免暴露私有成员。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var loveThing = (function(){
  var my = {};
  var love = &quot;coding&quot;;
  my.getLove = function() {
    return love;
  }
  my.sayLove = function(thing) {
    console.log(thing);
  }
  return my;
})();

console.log(loveThing.getLove());//&amp;gt;&amp;gt;&amp;gt; coding
loveThing.sayLove('reading');//&amp;gt;&amp;gt;&amp;gt; reading

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们试着获取里面的变量：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.log(loveThing.love);//&amp;gt;&amp;gt;&amp;gt; undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;果然，外部根本看不见里面的零件，只能使用提供的接口。这样才能保证私有变量的安全。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;放大模式&lt;/h2&gt;
&lt;p&gt;当然，一个项目要用到模块化的时候，说明这个项目足够大足够复杂，一个模块可能需要继承另一个模块，或者扩充模块，这时候需要使用&lt;strong&gt;放大模式&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var loveThing = (function (o){
  o.sayOK = function () {
    console.log('OK');
  };
  return o;
})(loveThing);

loveThing.sayOK();//&amp;gt;&amp;gt;&amp;gt; OK!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-5&quot;&gt;宽放大模式&lt;/h2&gt;
&lt;p&gt;可是，浏览器是一个不按常理出牌的环境，你永远不知道自己引用的模块是否已经加载。万一我之前的&lt;code class=&quot;highlighter-rouge&quot;&gt;loveThing&lt;/code&gt;没有被加载，上面这段代码就会报错了（找不到对象）。解决方法就是所谓&lt;strong&gt;宽放大模式&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var loveThing = (function (o){
  o.sayOK = function () {};
  return o;
})(loveThing || {});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;与之前唯一的不同就是参数可以为空对象。&lt;/p&gt;

&lt;p&gt;至此，最基本的JavaScript模块化写法你已经学会了，相信你也体会到自己原来的写法有什么不足。&lt;/p&gt;

&lt;p&gt;受篇幅限制，本篇入门到此结束，我会在下一篇讨论流行的模块化规范。&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Mar 2016 00:00:00 +0800</pubDate>
        <link>//2016/03/16/js-version/</link>
        <guid isPermaLink="true">//2016/03/16/js-version/</guid>
        
        <category>前端开发</category>
        
        <category>JavaScript</category>
        
        
      </item>
    
  </channel>
</rss>
